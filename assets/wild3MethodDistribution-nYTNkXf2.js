import{u as F,a as u,R as m,n as j,j as a,b as y,r as g,p as v,d as w,o as D,f as _,t as T,i as p,H as P,z as R,l as k,y as c,_ as I,B as M,w as E,v as W}from"./index-CiP3hG4I.js";import{e as x,g as L,a as V,f as A,d as N,h as O,j as U}from"./utils-B9m1m_ID.js";const S=["Fastest","Average","Slowest","From PID","Custom"],$=D({map:M(),encounterType:I(O),advance:c().int().min(0),tid:c().int().min(0).max(65535),sid:c().int().min(0).max(65535),leadTypeIdx:c(),leadSpeedType:I(S),leadPID:c().min(0).max(4294967295),leadCycleSpeed:c().min(18).max(900)}),z=()=>({map:"MAP_ROUTE101",encounterType:"Land",tid:0,sid:0,advance:0,leadTypeIdx:0,leadSpeedType:"Average",leadPID:0,leadCycleSpeed:0}),b=[{label:"Ordinary lead",value:"Vanilla"},{label:"Egg",value:"Egg"},...j.map(t=>({label:`Synchronize (${t})`,value:{Synchronize:t}})),{label:"Cute Charm (Male)",value:{CuteCharm:"Male"}},{label:"Cute Charm (Female)",value:{CuteCharm:"Female"}}],G=(t,r,e,l)=>{const n=x.encounter_tables.filter(s=>s.map_id===t).map(s=>s.encounter_type),i=[{label:"Map",input:a.jsx(_,{name:"map",options:T(x.maps,V)})},{label:"Encounter Type",input:a.jsx(_,{name:"encounterType",options:T(n,A)})},{label:"TID",input:a.jsx(p,{name:"tid",numType:"decimal"})},{label:"SID",input:a.jsx(p,{name:"sid",numType:"decimal"})},{label:"Lead",input:a.jsx(_,{name:"leadTypeIdx",options:b.map((s,d)=>({label:s.label,value:d}))})}];return r!=="Egg"&&(i.push({label:"Lead Speed",input:a.jsx(P,{name:"leadSpeedType",options:S.slice(0)})}),e==="From PID"?i.push({label:"",key:"From PID",input:a.jsx(y,{fields:[{label:"Lead PID:",input:a.jsx(p,{name:"leadPID",numType:"hex"})}]})}):e==="Custom"&&i.push({label:"",key:"Custom",input:a.jsx(y,{fields:[{label:"PID modulo cycle count:",input:a.jsx(p,{name:"leadCycleSpeed",numType:"decimal"})}]})}),i.push({label:"",input:a.jsx(y,{fields:[{label:"Cycle Count:",input:`${l} cycles`}]})})),i.push({label:"Advance",input:a.jsx(p,{name:"advance",numType:"decimal"})}),i},B=()=>{const{setFieldValue:t}=F(),r=u({name:"map"}),e=u({name:"leadTypeIdx"}),l=u({name:"leadSpeedType"}),n=u({name:"leadCycleSpeed"}),i=u({name:"leadPID"}),s=m.useMemo(()=>G(r,b[e].value,l,n),[r,e,l,n]);return m.useEffect(()=>{K(l,n,i).then(d=>{t("leadCycleSpeed",d)})},[t,n,l,i]),a.jsx(y,{fields:s})},H=t=>[{title:a.jsxs(a.Fragment,{children:["Cycle at start",a.jsx("br",{})," of Sweet Scent"]}),key:"Cycle at start",dataIndex:"pre_sweet_scent_cycle_ranges",render:e=>e.length===0?"Less than 0":e.map(n=>`${n.start} - ${n.start+n.len-1}`).map(n=>a.jsx("div",{children:n},n))},{title:"Likelihood",dataIndex:"method_probability",render:e=>W(e)},{title:"Method",dataIndex:"method"},{title:"Species",dataIndex:"species"},{title:"PID",dataIndex:"pid",monospace:!0,render:e=>e.toString(16).padStart(8,"0").toUpperCase()},{title:"Shiny",dataIndex:"shiny",render:e=>e?"Yes":"No"},...E],K=async(t,r,e)=>R(t).with("Fastest",()=>18).with("Slowest",()=>900).with("Average",()=>775).with("Custom",()=>r).with("From PID",()=>g.calculate_pid_speed(e)).exhaustive();let Y=0;const q=(t,r)=>{const e=U.indexOf(t.searcher_res.encounter_slot),l=e==-1?"None":r.slots[e].species;return{...t.searcher_res,...t.searcher_res.ivs,method_probability:t.method_probability,pre_sweet_scent_cycle_ranges:t.pre_sweet_scent_cycle_ranges,species:l,uid:Y++}},J=(t,r)=>t.map(e=>q(e,r)).sort((e,l)=>{var i,s,d,o;const n=(((i=e.pre_sweet_scent_cycle_ranges[0])==null?void 0:i.start)??-1)-(((s=l.pre_sweet_scent_cycle_ranges[0])==null?void 0:s.start)??-1);return n!==0?n:(((d=e.pre_sweet_scent_cycle_ranges[0])==null?void 0:d.len)??0)-(((o=l.pre_sweet_scent_cycle_ranges[0])==null?void 0:o.len)??0)}),Z=({game:t})=>{const[r,e]=m.useState([]),l=t==="emerald"?0:1440,n=m.useCallback(async s=>{const d={advance:s.advance,tid:s.tid,sid:s.sid,map_idx:0,encounter_slot:null,methods:["Wild1","Wild2","Wild3","Wild4","Wild5"],lead:b[s.leadTypeIdx].value,filter:v(k()),gen3_filter:L(N()),consider_cycles:!0,consider_rng_manipulated_lead_pid:!0,generate_even_if_impossible:!0},o=x.encounter_tables.find(h=>h.map_id===s.map&&h.encounter_type===s.encounterType);if(o==null)return e([]);const f=await g.generate_gen3_wild_distribution(l,d,o,s.leadCycleSpeed),C=J(f,o);e(C)},[l]),i=m.useMemo(()=>z(),[]);return a.jsx(w,{getColumns:H,results:r,validationSchema:$,initialValues:i,onSubmit:n,submitTrackerId:"wild3_find_target",rowKey:"uid",children:a.jsx(B,{})})};export{Z as Wild3MethodDistribution,B as Wild3MethodDistributionFields};
