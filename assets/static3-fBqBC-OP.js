import{c as T,R as l,r as p,j as t,z as a,a as n,b,e as c,H as k,T as R}from"./index-DXZ5ShUP.js";import{R as x}from"./rngToolForm-B4hBWdo1.js";import{p as S,c as h,d as y,e as g}from"./pkmFilter-Dut2CP0u.js";import{f,a as I}from"./ivColumns-Co1n9lOk.js";import{s as j}from"./species-Be9kh-u_.js";import"./ivs-DDKKiU8r.js";const v=["Chikorita","Totodile","Cyndaquil","Treecko","Mudkip","Torchic","Lileep","Anorith","Castform","Beldum","Wynaut","Kecleon","Voltorb","Electrode","Sudowoodo","Regirock","Regice","Registeel","Latias","Latios","Kyogre","Groudon","Rayquaza","Mew","Deoxys","Lugia","HoOh"],_=["Treecko","Mudkip","Torchic","Lileep","Anorith","Castform","Beldum","Wynaut","Kecleon","Voltorb","Electrode","Regirock","Regice","Registeel","Latias","Latios","Kyogre","Groudon","Rayquaza"],C=["Bulbasaur","Squirtle","Charmander","Omanyte","Kabuto","Aerodactyl","Hitmonlee","Hitmonchan","Magikarp","Lapras","Eevee","Togepi","Abra","Clefairy","Scyther","Dratini","Porygon","Pinsir","Snorlax","Electrode","Hypno","Articuno","Zapdos","Moltres","Mewtwo","Deoxys","Lugia","HoOh","Raikou","Entei","Suicune"],m=e=>T(e).with("emerald",()=>v).with("rs",()=>_).with("frlg",()=>C).exhaustive(),F=[{title:"Seed",dataIndex:"seed",monospace:!0,render:e=>e.toString(16).padStart(8,"0").toUpperCase()},{title:"PID",dataIndex:"pid",monospace:!0,render:e=>e.toString(16).padStart(8,"0").toUpperCase()},{title:"Nature",dataIndex:"nature"},{title:"Ability",dataIndex:"ability"},...I,{title:"Shiny",dataIndex:"shiny",render:e=>e?"Yes":"No"},{title:"Gender",dataIndex:"gender"}],M=a.object({tid:a.number().int().min(0).max(65535),sid:a.number().int().min(0).max(65535),species:a.enum(j),roamer:a.boolean(),method4:a.boolean()}).merge(g),w=e=>({tid:0,sid:0,species:m(e)[0],roamer:!1,method4:!1,...y()}),L=e=>{const s=m(e);return[{label:"TID",input:t.jsx(n,{name:"tid",numType:"decimal"})},{label:"SID",input:t.jsx(n,{name:"sid",numType:"decimal"})},{label:"Species",input:t.jsx(b,{name:"species",options:s.sort((i,r)=>i.localeCompare(r)).map(i=>({label:i,value:i}))})},{label:"Roamer",input:t.jsx(c,{name:"roamer"})},{label:"Method 4",input:t.jsx(c,{name:"method4"})},...h()]},A=({game:e})=>{const[s,i]=l.useState([]),r=l.useMemo(()=>L(e),[e]),d=l.useCallback(async o=>{const u=await p.gen3_static_searcher_states({...o,bugged_roamer:e!=="emerald"&&o.roamer,filter:S(o)});i(u.map(f))},[e]);return t.jsx(x,{fields:r,columns:F,results:s,validationSchema:M,initialValues:w(e),onSubmit:d,submitTrackerId:"search_gen3_static"})},D=[{title:"Advance",dataIndex:"advance"},{title:"PID",dataIndex:"pid",monospace:!0,render:e=>e.toString(16).padStart(8,"0").toUpperCase()},{title:"Nature",dataIndex:"nature"},{title:"Ability",dataIndex:"ability"},...I,{title:"Shiny",dataIndex:"shiny",render:e=>e?"Yes":"No"},{title:"Gender",dataIndex:"gender"}],V=a.object({offset:a.number().int().min(0),seed:k(65535),initial_advances:a.number().int().min(0),max_advances:a.number().int().min(0),tid:a.number().int().min(0).max(65535),sid:a.number().int().min(0).max(65535),species:a.enum(j),roamer:a.boolean(),method4:a.boolean()}).merge(g),E=e=>({offset:0,seed:0,initial_advances:0,max_advances:0,tid:0,sid:0,species:m(e)[0],roamer:!1,method4:!1,...y()}),G=e=>{const s=m(e);return[{label:"Seed",input:t.jsx(n,{name:"seed",numType:"hex"})},{label:"TID",input:t.jsx(n,{name:"tid",numType:"decimal"})},{label:"SID",input:t.jsx(n,{name:"sid",numType:"decimal"})},{label:"Species",input:t.jsx(b,{name:"species",options:s.sort((i,r)=>i.localeCompare(r)).map(i=>({label:i,value:i}))})},{label:"Roamer",input:t.jsx(c,{name:"roamer"})},{label:"Method 4",input:t.jsx(c,{name:"method4"})},{label:"Initial advances",input:t.jsx(n,{name:"initial_advances",numType:"decimal"})},{label:"Max advances",input:t.jsx(n,{name:"max_advances",numType:"decimal"})},{label:"Offset",input:t.jsx(n,{name:"offset",numType:"decimal"})},...h()]},H=({game:e="emerald"})=>{const[s,i]=l.useState([]),r=l.useMemo(()=>G(e),[e]),d=l.useCallback(async o=>{const u=await p.gen3_static_generator_states({...o,bugged_roamer:e!=="emerald"&&o.roamer,filter:S(o)});i(u.map(f))},[e]);return t.jsx(x,{fields:r,columns:D,results:s,initialValues:E(e),validationSchema:V,onSubmit:d,submitTrackerId:"generate_gen3_static"})},K=e=>[{key:"search",label:"Searcher",children:t.jsx(A,{game:e})},{key:"generator",label:"Generator",children:t.jsx(H,{game:e})}],B=({game:e="emerald"})=>{const s=l.useMemo(()=>K(e),[e]);return t.jsx(R,{defaultActiveKey:"search",items:s})};export{B as Static3};
