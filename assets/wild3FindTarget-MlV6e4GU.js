import{u as M,R as m,j as a,F as w,T as j,a as v,p as G,g as F,r as k,b as B,z as r,c as D,d,t as u,e as O,f as h,h as g,n as f,s as U,i as q,k as H,l as K,m as L,o as Y,q as C,v as T,N as y,w as J,x as Q}from"./index-DOzbIVCf.js";import{u as X,g as Z,f as P,a as R,b as ee,e as b,c as I,d as te,h as E,i as ne}from"./utils-D9DTXb6q.js";const N=["Wild1","Wild2","Wild3","Wild4","Wild5"],ie=r.object({species:r.enum(H),tid:r.number().int().min(0).max(65535),sid:r.number().int().min(0).max(65535),maps:r.array(r.string()),vanillaLead:r.boolean(),cuteCharmLeadGenders:r.array(r.enum(I)),synchronizeLeadNatures:r.array(r.enum(f)),encounterTypes:r.array(r.enum(E)),methods:r.array(r.enum(N)),initial_advances:r.number().int().min(0).max(4294967295),max_advances:r.number().int().min(0).max(4294967295),max_result_count:r.number().int().min(1),rngManipulatedLeadPid:r.boolean(),mergeSimilarResults:r.boolean(),generate_even_if_impossible:r.boolean()}).merge(K).merge(ne),ae=()=>({species:"Abra",tid:0,sid:0,maps:[],vanillaLead:!0,cuteCharmLeadGenders:[...I],synchronizeLeadNatures:[...f],methods:["Wild1","Wild2","Wild4"],encounterTypes:[...E],initial_advances:1e3,max_advances:1e5,max_result_count:1e4,rngManipulatedLeadPid:!1,mergeSimilarResults:!0,generate_even_if_impossible:!1,...q(),...te()}),se=t=>{const n=Q(F,t);return[{label:"Species",input:a.jsx(d,{name:"species",options:u(b.species)})},...D({gender:n}),...ee({max_size:O(t)})]},S=t=>{var n;return Array.from(((n=b.speciesToEncounterInfo.get(t))==null?void 0:n.keys())??[])},$=t=>X(S(t).flatMap(n=>{var e;const i=(e=b.speciesToEncounterInfo.get(t))==null?void 0:e.get(n);return(i==null?void 0:i.map(s=>s.encounter_table.encounter_type))??[]})),re=(t,n)=>[{label:"Target Species",input:t},{label:"TID",input:a.jsx(h,{name:"tid",numType:"decimal",disabled:!n})},{label:"SID",input:a.jsx(h,{name:"sid",numType:"decimal",disabled:!n})},{label:"Maps",input:a.jsx(d,{name:"maps",options:u(S(t),R),mode:"multiple",fullWidth:!0,selectAllNoneButtons:!0})},{label:"Encounters",input:a.jsx(d,{name:"encounterTypes",options:u($(t),P),mode:"multiple",fullWidth:!0,selectAllNoneButtons:!0})},{label:"Ordinary lead",input:a.jsx(g,{name:"vanillaLead"})},{label:"Synchronize leads",input:a.jsx(d,{name:"synchronizeLeadNatures",options:u(f),mode:"multiple",selectAllNoneButtons:!0})},{label:"Cute Charm leads",input:a.jsx(d,{name:"cuteCharmLeadGenders",options:u(I),mode:"multiple"})},{label:"Methods",input:a.jsx(d,{name:"methods",options:u(N),mode:"multiple"})},{label:"RNG-manipulated lead PID",input:a.jsx(g,{name:"rngManipulatedLeadPid"})},{label:"Initial advances",input:a.jsx(h,{name:"initial_advances",numType:"decimal"})},{label:"Max advances",input:a.jsx(h,{name:"max_advances",numType:"decimal"})},{label:"Max result count",input:a.jsx(h,{name:"max_result_count",numType:"decimal"})},{label:"Merge similar results",input:a.jsx(g,{name:"mergeSimilarResults"})},{label:"Display results with 0% likelihood",input:a.jsx(g,{name:"generate_even_if_impossible"})}],oe=()=>{const{values:t,setValues:n}=M(),i=m.useMemo(()=>se(t.species),[t.species]);return m.useEffect(()=>{n(e=>({...e,maps:S(t.species),encounterTypes:$(t.species)}))},[t.species,n]),a.jsxs(w,{vertical:!0,gap:8,children:[a.jsx(j.Title,{level:5,p:0,m:0,children:"Target PokÃ©mon"}),a.jsx(v,{fields:i})]})},le=()=>{const{values:t}=M(),n=m.useMemo(()=>re(t.species,t.filter_shiny),[t.species,t.filter_shiny]);return a.jsxs(w,{vertical:!0,gap:8,children:[a.jsx(j.Title,{level:5,p:0,m:0,children:"Considered Setups"}),a.jsx(v,{fields:n})]})},x=(t,n)=>{const i=C(t.method_probability),e=t.pre_sweet_scent_cycle_range.start+t.pre_sweet_scent_cycle_range.len,s=e===0?`Method ${n} can't be triggered.`:`Method ${n} is triggered if the cycle counter at Sweet Scent is between ${t.pre_sweet_scent_cycle_range.start} and ${e}.`;return a.jsx(L,{title:s,children:a.jsx("div",{children:i})})},de=(t,n)=>{const i=[];return i.push({title:"Advances",dataIndex:"advance",monospace:!0,render:e=>{const s=(e/59.7275/60).toFixed(1);return a.jsx(L,{title:`~${s} min`,children:a.jsx("div",{children:Y(e)})})}},{title:"Map",dataIndex:"mapName"},{title:"Encounter",dataIndex:"encounterTypeName"},{title:"Method",dataIndex:"method"}),n.rngManipulatedLeadPid||i.push({title:a.jsxs(a.Fragment,{children:["Method ",a.jsx("br",{}),"Likelihood"]}),key:"<>Method <br />Likelihood</>",dataIndex:"cycle_data_by_lead",render:e=>{if(e==null)return"";const s=e.common_lower_lead.method_probability<e.common_upper_lead.method_probability?e.common_lower_lead:e.common_upper_lead;return C(s.method_probability)}}),i.push({title:"Lead",dataIndex:"lead",render:e=>T(e).with("Vanilla",()=>"Ordinary lead").with({Synchronize:y.string},s=>`Synchronize (${s.Synchronize})`).with({CuteCharm:y.string},s=>`CuteCharm (${s.CuteCharm})`).with("Egg",()=>"Egg lead").exhaustive()}),n.rngManipulatedLeadPid&&i.push({title:"Ideal Lead Speed",dataIndex:"cycle_data_by_lead",render:(e,s)=>{if(e==null||s.lead==="Egg")return"";if(e.ideal_lead.method_probability===e.slowest_lead.method_probability&&e.ideal_lead.method_probability===e.fastest_lead.method_probability)return"Any";const l=e.ideal_lead.lead_pid_cycle_count;return T(l).with(18,()=>"Fastest").with(900,()=>"Slowest").with(y.number,()=>l+" cycles").exhaustive()}},{title:"Method Likelyhood by Lead Speed",type:"group",columns:[{title:"Ideal",dataIndex:"cycle_data_by_lead",render:(e,s)=>e==null?"":x(e.ideal_lead,s.method)},{title:"Fastest",dataIndex:"cycle_data_by_lead",render:(e,s)=>e==null?"":x(e.fastest_lead,s.method)},{title:"Common",dataIndex:"cycle_data_by_lead",render:(e,s)=>{if(e==null)return"";const l=e.common_lower_lead.method_probability<e.common_upper_lead.method_probability?e.common_lower_lead:e.common_upper_lead;return x(l,s.method)}},{title:"Slowest",dataIndex:"cycle_data_by_lead",render:(e,s)=>e==null?"":x(e.slowest_lead,s.method)}]}),i.push({title:"Species",dataIndex:"species"},{title:"PID",dataIndex:"pid",monospace:!0,render:e=>e.toString(16).padStart(8,"0").toUpperCase()},{title:"Nature",dataIndex:"nature"},{title:"Ability",dataIndex:"ability"},{title:"Shiny",dataIndex:"shiny",render:e=>e?"Yes":"No"},{title:"Gender",dataIndex:"gender"},...J,{title:"Hidden Power",type:"group",columns:[{title:"Type",dataIndex:"hidden_power",render:e=>e.pokemon_type},{title:"Power",dataIndex:"hidden_power",render:e=>e.bp}]},{title:"PID speed",dataIndex:"pidCycleCount",render:e=>`${e} cycles`}),i},ue=t=>{const n=[];t.vanillaLead&&n.push("Vanilla");for(const i of t.synchronizeLeadNatures)n.push({Synchronize:i});return n},me=t=>{if(t.species==="None")return[];const n=t.maps,i=t.encounterTypes,e=b.speciesToEncounterInfo.get(t.species);if(e===void 0)return[];const s=[];return e.forEach((l,o)=>{n.includes(o)&&l.forEach(c=>{i.includes(c.encounter_table.encounter_type)&&s.push([o,c])})}),s};let ce=0;const pe=async(t,n,i,e)=>({...t,...t.ivs,mapName:i,encounterTypeName:e,species:n,uid:ce++,pidCycleCount:await k.calculate_pid_speed(t.pid)}),he=t=>{const n=new Map;return t.forEach(i=>{const e=`${i.pid},${i.ivs.hp},${i.ivs.atk},${i.ivs.def},${i.ivs.spa},${i.ivs.spd},${i.ivs.spe}`,s=n.get(e);(s===void 0||s.lead!=="Vanilla"&&i.lead==="Vanilla")&&n.set(e,i)}),Array.from(n.values())},_e=t=>U(t,["advance","method","map_idx"]),be=({game:t})=>{const[n,i]=m.useState([]),e=t==="emerald"?0:1440,s=m.useCallback(async o=>{const c=me(o),W={initial_seed:e,tid:o.tid,sid:o.sid,gender_ratio:F[o.species],initial_advances:o.initial_advances,max_advances:o.max_advances,max_result_count:o.max_result_count,filter:G(o),gen3_filter:Z(o),leads:ue(o),encounter_info_by_map:c.map(_=>_[1]),methods:o.methods,consider_cycles:!0,consider_rng_manipulated_lead_pid:o.rngManipulatedLeadPid,generate_even_if_impossible:o.generate_even_if_impossible};let p=await k.search_wild3(W);o.mergeSimilarResults&&(p=he(p)),p=_e(p);const z=await Promise.all(p.map(_=>{const[A,V]=c[_.map_idx];return pe(_,o.species,R(A),P(V.encounter_table.encounter_type))}));i(z)},[e]),l=m.useMemo(()=>ae(),[]);return a.jsxs(B,{getColumns:de,results:n,validationSchema:ie,initialValues:l,onSubmit:s,submitTrackerId:"wild3_find_target",rowKey:"uid",children:[a.jsx(oe,{}),a.jsx("br",{}),a.jsx(le,{})]})};export{le as SetupFilter,oe as TargetMon,be as Wild3SearcherFindTarget};
