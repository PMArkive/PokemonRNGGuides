import{u as C,R as p,n as f,j as a,a as m,r as T,p as F,b as j,z as d,d as y,t as h,f as c,y as v,v as w,i as D,w as P,q as k}from"./index-DOzbIVCf.js";import{e as _,g as R,a as M,f as E,d as W,h as L,j as V}from"./utils-D9DTXb6q.js";const S=["Fastest","Average","Slowest","From PID","Custom"],A=d.object({map:d.string(),encounterType:d.enum(L),advance:d.number().int().min(0),tid:d.number().int().min(0).max(65535),sid:d.number().int().min(0).max(65535),leadTypeIdx:d.number(),leadSpeedType:d.enum(S),leadPID:d.number().min(0).max(4294967295),leadCycleSpeed:d.number().min(18).max(900)}),N=()=>({map:"MAP_ROUTE101",encounterType:"Land",tid:0,sid:0,advance:0,leadTypeIdx:0,leadSpeedType:"Average",leadPID:0,leadCycleSpeed:0}),b=[{label:"Ordinary lead",value:"Vanilla"},{label:"Egg",value:"Egg"},...f.map(e=>({label:`Synchronize (${e})`,value:{Synchronize:e}})),{label:"Cute Charm (Male)",value:{CuteCharm:"Male"}},{label:"Cute Charm (Female)",value:{CuteCharm:"Female"}}],O=(e,s,t,i)=>{const l=_.encounter_tables.filter(n=>n.map_id===e).map(n=>n.encounter_type),r=[{label:"Map",input:a.jsx(y,{name:"map",options:h(_.maps,M)})},{label:"Encounter Type",input:a.jsx(y,{name:"encounterType",options:h(l,E)})},{label:"TID",input:a.jsx(c,{name:"tid",numType:"decimal"})},{label:"SID",input:a.jsx(c,{name:"sid",numType:"decimal"})},{label:"Lead",input:a.jsx(y,{name:"leadTypeIdx",options:b.map((n,o)=>({label:n.label,value:o}))})}];return s!=="Egg"&&(r.push({label:"Lead Speed",input:a.jsx(v,{name:"leadSpeedType",options:S.slice(0)})}),t==="From PID"?r.push({label:"",key:"From PID",input:a.jsx(m,{fields:[{label:"Lead PID:",input:a.jsx(c,{name:"leadPID",numType:"hex"})}]})}):t==="Custom"&&r.push({label:"",key:"Custom",input:a.jsx(m,{fields:[{label:"PID modulo cycle count:",input:a.jsx(c,{name:"leadCycleSpeed",numType:"decimal"})}]})}),r.push({label:"",input:a.jsx(m,{fields:[{label:"Cycle Count:",input:`${i} cycles`}]})})),r.push({label:"Advance",input:a.jsx(c,{name:"advance",numType:"decimal"})}),r},U=()=>{const{values:e,setFieldValue:s}=C(),t=p.useMemo(()=>O(e.map,b[e.leadTypeIdx].value,e.leadSpeedType,e.leadCycleSpeed),[e.map,e.leadTypeIdx,e.leadSpeedType,e.leadCycleSpeed]);return p.useEffect(()=>{z(e.leadSpeedType,e.leadCycleSpeed,e.leadPID).then(i=>{s("leadCycleSpeed",i)})},[s,e.leadCycleSpeed,e.leadSpeedType,e.leadPID]),a.jsx(m,{fields:t})},$=e=>[{title:a.jsxs(a.Fragment,{children:["Cycle at start",a.jsx("br",{})," of Sweet Scent"]}),key:"Cycle at start",dataIndex:"pre_sweet_scent_cycle_ranges",render:t=>t.length===0?"Less than 0":t.map(l=>`${l.start} - ${l.start+l.len-1}`).map(l=>a.jsx("div",{children:l},l))},{title:"Likelihood",dataIndex:"method_probability",render:t=>k(t)},{title:"Method",dataIndex:"method"},{title:"Species",dataIndex:"species"},{title:"PID",dataIndex:"pid",monospace:!0,render:t=>t.toString(16).padStart(8,"0").toUpperCase()},{title:"Shiny",dataIndex:"shiny",render:t=>t?"Yes":"No"},...P],z=async(e,s,t)=>w(e).with("Fastest",()=>18).with("Slowest",()=>900).with("Average",()=>775).with("Custom",()=>s).with("From PID",()=>T.calculate_pid_speed(t)).exhaustive();let G=0;const q=(e,s)=>{const t=V.indexOf(e.searcher_res.encounter_slot),i=t==-1?"None":s.slots[t].species;return{...e.searcher_res,...e.searcher_res.ivs,method_probability:e.method_probability,pre_sweet_scent_cycle_ranges:e.pre_sweet_scent_cycle_ranges,species:i,uid:G++}},K=(e,s)=>e.map(t=>q(t,s)).sort((t,i)=>{var r,n,o,u;const l=(((r=t.pre_sweet_scent_cycle_ranges[0])==null?void 0:r.start)??-1)-(((n=i.pre_sweet_scent_cycle_ranges[0])==null?void 0:n.start)??-1);return l!==0?l:(((o=t.pre_sweet_scent_cycle_ranges[0])==null?void 0:o.len)??0)-(((u=i.pre_sweet_scent_cycle_ranges[0])==null?void 0:u.len)??0)}),H=({game:e})=>{const[s,t]=p.useState([]),i=e==="emerald"?0:1440,l=p.useCallback(async n=>{const o={advance:n.advance,tid:n.tid,sid:n.sid,map_idx:0,encounter_slot:null,methods:["Wild1","Wild2","Wild3","Wild4","Wild5"],lead:b[n.leadTypeIdx].value,filter:F(D()),gen3_filter:R(W()),consider_cycles:!0,consider_rng_manipulated_lead_pid:!0,generate_even_if_impossible:!0},u=_.encounter_tables.find(x=>x.map_id===n.map&&x.encounter_type===n.encounterType);if(u==null)return t([]);const I=await T.generate_gen3_wild_distribution(i,o,u,n.leadCycleSpeed),g=K(I,u);t(g)},[i]),r=p.useMemo(()=>N(),[]);return a.jsx(j,{getColumns:$,results:s,validationSchema:A,initialValues:r,onSubmit:l,submitTrackerId:"wild3_find_target",rowKey:"uid",children:a.jsx(U,{})})};export{H as Wild3MethodDistribution,U as Wild3MethodDistributionFields};
